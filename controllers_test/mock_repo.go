// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Juan\Desktop\microservicio-golang\repository\vehicle_interface.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\Juan\Desktop\microservicio-golang\repository\vehicle_interface.go -destination=C:\Users\Juan\Desktop\microservicio-golang\controllers_test\mock_repo.go -package=controllers_test
//

// Package controllers_test is a generated GoMock package.
package controllers

import (
	reflect "reflect"

	models "github.com/Blesssssd/microservicio-golang/models"
	gomock "github.com/golang/mock/gomock"
)

// MockVehicleRepositoryInterface is a mock of VehicleRepositoryInterface interface.
type MockVehicleRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockVehicleRepositoryInterfaceMockRecorder is the mock recorder for MockVehicleRepositoryInterface.
type MockVehicleRepositoryInterfaceMockRecorder struct {
	mock *MockVehicleRepositoryInterface
}

// NewMockVehicleRepositoryInterface creates a new mock instance.
func NewMockVehicleRepositoryInterface(ctrl *gomock.Controller) *MockVehicleRepositoryInterface {
	mock := &MockVehicleRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleRepositoryInterface) EXPECT() *MockVehicleRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVehicleRepositoryInterface) Create(vehicle *models.Vehicle) (*models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", vehicle)
	ret0, _ := ret[0].(*models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVehicleRepositoryInterfaceMockRecorder) Create(vehicle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVehicleRepositoryInterface)(nil).Create), vehicle)
}

// Delete mocks base method.
func (m *MockVehicleRepositoryInterface) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVehicleRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVehicleRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockVehicleRepositoryInterface) GetAll() ([]models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockVehicleRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVehicleRepositoryInterface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockVehicleRepositoryInterface) GetByID(id string) (*models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVehicleRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVehicleRepositoryInterface)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockVehicleRepositoryInterface) Update(id string, vehicle *models.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVehicleRepositoryInterfaceMockRecorder) Update(id, vehicle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicleRepositoryInterface)(nil).Update), id, vehicle)
}
