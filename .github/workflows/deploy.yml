name: Deploy microservicio Golang con Docker Compose
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: juanpotes0922/microserviciogolang:latest
      
      - name: Create .env file
        run: |
          echo "MONGO_URI=mongodb://mongo:27017" > .env
          echo "MONGO_DB=vehiculosdb" >> .env
          echo "MONGO_COLLECTION=vehiculos" >> .env
      
      - name: Set up Docker Compose
        run: docker compose -f docker-compose.yml up -d
      
      - name: Wait for containers to be ready
        run: |
          # More robust wait with timeout
          timeout=60
          echo "Waiting up to $timeout seconds for services to be ready..."
          
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "Service is ready!"
              break
            fi
            echo "Waiting for service to be ready... $timeout seconds remaining"
            sleep 5
            timeout=$((timeout-5))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Timed out waiting for service"
            docker compose logs
            exit 1
          fi
      
      - name: Test Hello World endpoint
        run: |
          response=$(curl -s http://localhost:8080)
          echo "Response from service: $response"
          # Check if response contains expected content
          # Adjust the grep pattern to match your API's expected response
          echo "$response" | grep -q "." || exit 1
